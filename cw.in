#!@LUA@
-- cw (color wrapper) -*- lua -*-
--
-- Copyright (c) 2013-2020 Reuben Thomas <rrt@sc3d.org>
--
-- This file is part of cw.
--
-- cw is free software; you can redistribute it and/or modify it
-- under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 3, or (at your option)
-- any later version.
--
-- cw is distributed in the hope that it will be useful, but
-- WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-- General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with cw; see the file COPYING.  If not, see
-- <http://www.gnu.org/licenses/>. */


spec = [[
@PACKAGE@ @VERSION@

Usage: cw [OPTION]... [FILE]...

cw is not meant to be run directly! (See documentation.)

Options:

      --help               display this help, then exit
      --version            display version information, then exit
]]

-- Remove current directory from package.path
package.path = package.path:gsub (";%./%?%.lua", ""):gsub ("^%./%?%.lua;", "")

local std = require "std"
local string = require "std.string"
posix = require "posix" -- make visible to definitions
local colors = require "ansicolors"

-- Filter a directory out of a PATH-like colon-separated path list.
local function remove_dir_from_path(path, dir)
  local canon_dir = posix.realpath (dir)
  return std.table.concat (std.functional.filter (function (s) return posix.realpath (s) ~= canon_dir end,
                                                  std.ielems,
                                                  string.split (path, ":")), ":")
end

-- Type to color map.
local colormap = {}
local function setcolors (str)
  for ass in std.ielems (string.split (str, ":")) do
    local class, col = table.unpack (string.split (ass, "="))
    if not class or #class == 0 then
      std.io.die ("class missing.")
    end
    if not col or #col == 0 then
      std.io.die ("color missing.")
    end
    colormap[class] = colors.noReset ("%{reset " .. col .. "}")
  end
end

-- Convert a lexical class to a color, defaulting to the color of the default class.
local function class_to_color (class)
  return colormap[class] or colormap["default"]
end

-- User-visible APIs
local matches = std.list {}
function match (class, regex)
  std.table.insert (matches, {col = class_to_color (class), regex = regex})
end

-- Create a coloring array for a string.
local function make_colors (s)
  local cols = std.list.rep (std.list {class_to_color ("default")}, #s) -- Fill color array with default color.
  for m in std.ielems (matches) do
    for c in std.ielems (string.finds (s, m.regex)) do
      local from, to = table.unpack (c)
      cols = cols:sub (1, from - 1) .. std.list.rep (std.list {m.col}, to - from + 1) .. cols:sub (to + 1)
    end
  end
 return cols
end

-- Color a string given a coloring array.
local function apply_colors (s, color)
  local r = {}
  local col -- nil guarantees immediate change of color
  for i = 1, #s do
    if col ~= color[i] then
      col = color[i]
      table.insert (r, col)
    end
    table.insert (r, s:sub (i, i))
  end
  if col ~= "reset" then
    table.insert (r, colors.noReset ("%{reset}"))
  end
  return table.concat (r)
end


-- Parse command-line arguments
local scrname = arg[1]
local OptionParser = require "optparse"
local parser = OptionParser (spec)
if not scrname then
  parser:help ()
elseif scrname:sub (1, 1) == "-" then
  _G.arg, _ = parser:parse (_G.arg)
end
arg[0] = nil
std.table.remove (arg, 1)
command_arg = std.table.clone (arg)
std.table.insert (command_arg, 1, posix.basename (scrname))

posix.setenv ("PATH", remove_dir_from_path (os.getenv("PATH"), "@pkglibexecdir@"))

setcolors ("default=reset") -- Ensure there is a "default" class
setcolors (os.getenv ("CW_COLORS") or (os.getenv ("CW_INVERT") and
  "default=black:highlight=bright magenta:lowlight=magenta:warning=bright blue:error=bright red" or
  "default=white:highlight=bright green:lowlight=green:warning=bright yellow:error=bright red"))
local nocolor = os.getenv("NOCOLOR") or os.getenv("TERM") == "dumb" -- read NOCOLOR before definition script

-- Run definition script
std.table.merge (arg, std.table.invert (arg)) -- add arguments as keys
local ok, msg = pcall (dofile, scrname)
if ok == false then
  std.io.die ("error in definition file: " .. msg)
end

if not nocolor and posix.isatty (posix.STDOUT_FILENO) == 1 then
  local orig_pid = posix.getpid ("pid")
  posix.signal (posix.SIGINT,
                function ()
                  local pid = posix.getpid ("pid")
                  if pid == orig_pid then
                    posix.write (posix.STDOUT_FILENO, "\x1b[00m")
                  end
                  posix.signal (posix.SIGINT, "SIG_DFL")
                  posix.kill (pid, posix.SIGINT)
                end)
  -- Take chunks of input, color it line by line, and write the result.
  local buf = ""
  local pfd = posix.popen (command_arg, "r", posix.openpty)
  -- It seems obvious to use io.lines on fdopen (pfd.fd), but a pty returns
  -- EIO to read when the slave end is closed. Wrapping the loop in pcall
  -- would suppress errors in the coloring code, so instead we slurp the fd
  -- directly and catch errors from read.
  while true do
    local chunk = posix.read (pfd.fd, posix.BUFSIZ)
    if not chunk or #chunk == 0 then break end
    buf = buf .. chunk
    local lines = string.split (buf, "\r\n")
    buf = std.table.remove (lines)
    for l in std.ielems (lines) do
      posix.write (posix.STDOUT_FILENO, apply_colors (l, make_colors (l)) .. "\n")
    end
  end
  local _, ret = posix.pclose (pfd)
  os.exit (ret)
else -- Run the command without coloring.
  posix.execp (table.unpack (command_arg))
  std.io.die ("could not run command: " .. scrname)
end
